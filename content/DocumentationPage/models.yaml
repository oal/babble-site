title: Models
content:
    -
        type: Section
        value:
            title: Introduction
            body: "Models define the structure of content in a Babble site. They are written in YAML, and stored inside the \"models\" directory in the project root.\n\nA very simple model may look like this:\n\n```yaml\nname: Page\nfields:\n\ttitle:\n    \tname: 'Page title'\n        type: text\n    body:\n    \tname: 'Page content'\n        type: markdown\n```\n\nThe only mandatory top level keys of a model are \"name\" and \"fields\". For fields, the only mandatory keys are \"name\" and \"type\". In addition to these, each model, and fields, can have an \"options\" object for changing the behavior of the model or field."
    -
        type: Section
        value:
            title: 'Top level properties'
            body: "We've already seen the `name` and `fields` properties. Here's a complete listing of top level model properties available in Babble:\n\n#### name (string)\nThe complete name of your model. This is the value that will be presented to end users, in the admin and elsewhere.\n\n#### name_plural (string, optional)\nSame as above, but used when the plural version of the name is needed. If this is not set, it will be assumes to be the model's name, with an \"s\" appended.\n\n#### hierarchical (boolean, default: false)\nCan be either true or false, and specifies whether the model can have sub-entries. Usually you are limited to IDs without slashes, like `index`, `about` etc. But when using `hierarchical: true` on the model, you may have IDs like `services/automation`, or `animals/cats/garfield`.\n\n#### single (boolean, default: false)\nIf true, this model can only ever have one instance. It's stored inside `content/ModelName.yaml`, unlike the default multi instance models which get stored in `content/ModelName/[ID].yaml`. This setting can obviously not be used along with `hierarchical: true`.\n\n#### options (object, optional)\nThis object is used for things not directly related to the Babble core. Most notably options related to Babble's admin interface. More on this can be found in the Babble Admin documentation.\n\n#### fields (object)\nData fields for the model. See below for a complete list of available field types and their options."
    -
        type: Section
        value:
            title: 'Field types'
            body: "### boolean\nBoolean fields can have either `true` or `false` as their value. No additional options are available for this field.\n\n### datetime\nTakes values on the format `YYYY-MM-DD HH:mm`, and is available as a Carbon DateTime instance inside templates. This means you can do something like `{{ this.published_at.format(\"d.m.Y\") }}` in a template.\n\n### file\nTakes the path to a file, relative to the project's upload directory (`public/uploads`). Returns the absolute path to the file when used in a template.\n\n### html\nUsed to store arbitrary HTML markup.\n\n### image\nSimilar to the file field, except that it also allows specifying an image size for automatic cropping and resizing. Available options are `width` and `height`. Example:\n```yaml\nfields:\n\tavatar:\n    \ttype: image\n        options:\n\t\t\twidth: 150\n            height: 150\n```\n\n### list\nList fields are used to allow model blocks to be used more than once inside a single field. One or more model blocks must be added to the `blocks` option for this field to work. Example:\n\n```yaml\nfields:\n\tcontent:\n    \ttype: list\n        options:\n        \tblocks:\n            - Title\n            - RichText\n            - Map\n```\n\nPlease have a look at the **Model Blocks** documentation page to learn how to define model blocks.\n\n### markdown\nMarkdown fields are automatically rendered to HTML when used in a template. `### Title` will become a `h3` tag etc. Please refer to markdown documentation elsewhere.\n\n### password\nPrimarily for internal use. The password field is used in the default `User` model, which is used for authenticating against the Babble API and admin. Password values are hashed using PHP's `password_hash` function.\n\n### text\nSimple text fields with no additional processing in templates."
