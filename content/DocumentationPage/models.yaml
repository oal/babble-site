title: '3. Models'
content:
    -
        type: Section
        value:
            title: Introduction
            body: |
                Models define the structure of content in a Babble site. They are written in YAML, and stored inside the "models" directory in the project root.
                
                A very simple model may look like this:
                
                ```yaml
                name: Page
                fields:
                	title:
                    	name: 'Page title'
                        type: text
                    body:
                    	name: 'Page content'
                        type: markdown
                ```
                
                The only mandatory top level keys of a model are "name" and "fields". For fields, the only mandatory keys are "name" and "type". In addition to these, each model, and fields, can have an "options" object for changing the behavior of the model or field.
                
    -
        type: Section
        value:
            title: 'Top level properties'
            body: |
                We've already seen the `name` and `fields` properties. Here's a complete listing of top level model properties available in Babble:
                
                #### name (string)
                The complete name of your model. This is the value that will be presented to end users, in the admin and elsewhere.
                
                #### name_plural (string, optional)
                Same as above, but used when the plural version of the name is needed. If this is not set, it will be assumes to be the model's name, with an "s" appended.
                
                #### hierarchical (boolean, default: false)
                Can be either true or false, and specifies whether the model can have sub-entries. Usually you are limited to IDs without slashes, like `index`, `about` etc. But when using `hierarchical: true` on the model, you may have IDs like `services/automation`, or `animals/cats/garfield`.
                
                #### single (boolean, default: false)
                If true, this model can only ever have one instance. It's stored inside `content/ModelName.yaml`, unlike the default multi instance models which get stored in `content/ModelName/[ID].yaml`. This setting can obviously not be used along with `hierarchical: true`.
                
                #### options (object, optional)
                This object is used for things not directly related to the Babble core. Most notably options related to Babble's admin interface. More on this can be found in the Babble Admin documentation.
                
                #### fields (object)
                Data fields for the model. See below for a complete list of available field types and their options.
                
    -
        type: Section
        value:
            title: 'Field types'
            body: |
                ### boolean
                Boolean fields can have either `true` or `false` as their value. No additional options are available for this field.
                
                ### datetime
                Takes values on the format `YYYY-MM-DD HH:mm`, and is available as a Carbon DateTime instance inside templates. This means you can do something like `{{ this.published_at.format("d.m.Y") }}` in a template.
                
                ### file
                Takes the path to a file, relative to the project's upload directory (`public/uploads`). Returns the absolute path to the file when used in a template.
                
                ### html
                Used to store arbitrary HTML markup. Can be turned into a WYSIWYG editor (MediumEditor) in the admin like this:
                ```
                fields:
                	content:
                    	type: html
                        options:
                        	admin:
                            	wysiwyg: true
                ```
                
                ### image
                Similar to the file field, except that it also allows specifying an image size for automatic cropping and resizing. Available options are `width` and `height`. Example:
                ```yaml
                fields:
                	avatar:
                    	type: image
                        options:
                			width: 150
                            height: 150
                ```
                
                The crop tool in the admin interface can be enabled by adding `crop: true` under the field's admin options section, like this:
                ```yaml
                fields:
                	avatar:
                    	type: image
                        options:
                			width: 150
                            height: 150
                            admin:
                            	crop: true
                ```
                
                ### list
                List fields are used to allow model blocks to be used more than once inside a single field. One or more model blocks must be added to the `blocks` option for this field to work. Example:
                
                ```yaml
                fields:
                	content:
                    	type: list
                        options:
                        	blocks:
                            - Title
                            - RichText
                            - Map
                ```
                
                Please have a look at the **Model Blocks** documentation page to learn how to define model blocks.
                
                ### markdown
                Markdown fields are automatically rendered to HTML when used in a template. `### Title` will become a `h3` tag etc. Please refer to markdown documentation elsewhere.
                
                ### password
                Primarily for internal use. The password field is used in the default `User` model, which is used for authenticating against the Babble API and admin. Password values are hashed using PHP's `password_hash` function.
                
                ### tags
                The `tags` field type is useful for tagging content, like blog posts.
                
                ### text
                Simple text fields with no additional processing in templates.
                
